class FeaturesAnimationController{constructor(){this.isInitialized=!1;this.observerOptions={root:null,rootMargin:"0px 0px -50px 0px",threshold:0.2,};this.init()}
init(){if(this.isInitialized)return;this.setupIntersectionObservers();this.setupParallaxEffects();this.initializeCounters();this.isInitialized=!0}
setupIntersectionObservers(){this.mainObserver=new IntersectionObserver((entries)=>{entries.forEach((entry)=>{const section=document.querySelector(".features-features-section");if(entry.isIntersecting){section.classList.add("in-view");this.triggerSectionEntry()}else{if(entry.boundingClientRect.top<0){section.classList.remove("in-view");this.triggerSectionExit()}}})},this.observerOptions);const section=document.querySelector(".features-features-section");if(section)this.mainObserver.observe(section);}
triggerSectionEntry(){const header=document.querySelector(".features-section-header");const stats=document.querySelector(".features-features-stats");const cards=document.querySelectorAll(".features-feature-card");if(header)header.classList.add("animate");cards.forEach((card,index)=>{setTimeout(()=>{card.classList.add("animate")},index*150)});setTimeout(()=>{if(stats){stats.classList.add("animate");this.animateCounters()}},800)}
triggerSectionExit(){const header=document.querySelector(".features-section-header");const stats=document.querySelector(".features-features-stats");const cards=document.querySelectorAll(".features-feature-card");if(header)header.classList.remove("animate");if(stats)stats.classList.remove("animate");cards.forEach((card)=>card.classList.remove("animate"));this.resetCounters()}
setupParallaxEffects(){window.addEventListener("scroll",()=>{const section=document.querySelector(".features-features-section.in-view");if(!section)return;const scrolled=window.pageYOffset;const sectionTop=section.offsetTop;const progress=(scrolled-sectionTop)/window.innerHeight;const floatingElements=section.querySelectorAll(".features-float-element");floatingElements.forEach((element,index)=>{const speed=0.1+index*0.05;const yOffset=progress*100*speed;element.style.transform=`translateY(${yOffset}px)`})})}
initializeCounters(){this.counters=document.querySelectorAll(".features-stat-number");this.resetCounters()}
animateCounters(){this.counters.forEach((counter)=>{if(counter.dataset.animated)return;counter.dataset.animated="true";const target=parseInt(counter.getAttribute("data-target"));const duration=2000;const increment=target/(duration/16);let current=0;const timer=setInterval(()=>{current+=increment;if(current>=target){current=target;clearInterval(timer)}
counter.textContent=Math.floor(current).toLocaleString()+(counter.dataset.suffix||"")},16)})}
resetCounters(){this.counters.forEach((counter)=>{counter.textContent="0"+(counter.dataset.suffix||"");delete counter.dataset.animated})}}
export function initFeaturesSection(){const controller=new FeaturesAnimationController();document.addEventListener("visibilitychange",()=>{const section=document.querySelector(".features-features-section");if(section){section.style.animationPlayState=document.hidden?"paused":"running"}})}